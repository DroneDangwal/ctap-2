package aunthenticator

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha512"
)

type Authenticator struct {
	//data structure to store the private key
	//corresponding to all the RPs that the
	//authenticator has been registered on
	credentialsLog map[string]rsa.PrivateKey
}

func (auth Authenticator) actuallyCreateCredentials(RPid string) (pubKey crypto.PublicKey) {
	//generate private key
	key, err := rsa.GenerateKey(rand.Reader, 4096)
	if err != nil {
		panic(err)
	}

	//generate public key
	pubKey = key.Public()

	//Store the private key
	auth.credentialsLog[RPid] = *key

	return
}

func DecryptWithPrivateKey(ciphertext []byte, priv *rsa.PrivateKey) []byte {
	hash := sha512.New()
	plaintext, err := rsa.DecryptOAEP(hash, rand.Reader, priv, ciphertext, nil)
	if err != nil {
		panic(err)
	}
	return plaintext
}

// func EncryptWithPublicKey(msg []byte, pub *rsa.PublicKey) []byte {
// 	hash := sha512.New()
// 	ciphertext, err := rsa.EncryptOAEP(hash, rand.Reader, pub, msg, nil)
// 	if err != nil {
// 		log.Error(err)
// 	}
// 	return ciphertext
// }

func (auth Authenticator) sign(RPid string, ciphertext []byte) []byte {
	//retrieve private key
	priv := auth.credentialsLog[RPid]

	//decrypt the cipher text
	challenge := DecryptWithPrivateKey(ciphertext, &priv)

	//hash the challenge
	challengeHash := sha512.New()
	_, err := challengeHash.Write(challenge)
	if err != nil {
		panic(err)
	}
	challengeHashSum := challengeHash.Sum(nil)

	//sign the hash
	signature, err := rsa.SignPSS(rand.Reader, priv, crypto.SHA512, challengeHashSum, nil)
	if err != nil {
		panic(err)
	}

	return signature
}

// func (auth Authenticator) getSign(RPid string, cipherChallenge string) (signature string) {
// 	//retrieve private key
// 	key := auth.credentialsLog[RPid]
// 	keyHashed := md5.Sum([]byte(key))
// 	keyHex := hex.EncodeToString(keyHashed[:])
// 	decryptedText, _ := decrypt([]byte(keyHex), cipherChallenge)

// }

// func decrypt(key []byte, cipherTextB64 string) (decrypted string, err error) {
// 	cipherText, _ := base64.StdEncoding.DecodeString(cipherTextB64)                      // Fix 1: don't separate IV and ciphertext
// 	iv := []byte{231, 9, 137, 91, 166, 112, 98, 216, 65, 150, 255, 96, 118, 243, 88, 85} // Fix 2: apply the static IV from the Java side
// 	block, _ := aes.NewCipher(key)
// 	stream := CFB8.NewCFB8Decrypt(block, iv) // Fix 3: apply CFB8
// 	stream.XORKeyStream(cipherText, cipherText)
// 	return string(cipherText), nil
// }
